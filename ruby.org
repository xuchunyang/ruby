#+PROPERTY: header-args:ruby :results output

* 控制语句
** 条件（比较）

#+BEGIN_SRC ruby
p (1 == 1)
p (1 == 2)
p ("Ruby" == "Ruby")
p ("Ruby" == "Rubies")
p (1 != 1)
p (1 != 2)
#+END_SRC

#+RESULTS:
: true
: false
: true
: false
: false
: true

** if

#+BEGIN_SRC ruby
  x = 20
  if x >= 10
    puts "bigger"
  else
    puts "smaller"
  end
#+END_SRC

#+RESULTS:
: bigger

** 循环

#+BEGIN_SRC ruby
  i = 1
  while i <= 3
    puts i
    i = i + 1
  end
#+END_SRC

#+RESULTS:
: 1
: 2
: 3

#+BEGIN_SRC ruby
  3.times do
    puts "I am learning Ruby."
  end
#+END_SRC

#+RESULTS:
: I am learning Ruby.
: I am learning Ruby.
: I am learning Ruby.

* 数组 (Array)

** 初始化数组、访问和修改数组元素、数组长度
#+BEGIN_SRC ruby
names = ["李白", "杜甫", "白居易"]
p names
print "第一个名字是: ", names[0], "\n"

names[0] = "李商隐"
p names
print "第一个名字是: ", names[0], "\n"

names[10] = "陈子昂"
p names

p names.size
#+END_SRC

#+RESULTS:
: ["李白", "杜甫", "白居易"]
: 第一个名字是: 李白
: ["李商隐", "杜甫", "白居易"]
: 第一个名字是: 李商隐
: ["李商隐", "杜甫", "白居易", nil, nil, nil, nil, nil, nil, nil, "陈子昂"]
: 11

** 循环一个数组

each 是一个带块 (block) 的方法

#+BEGIN_SRC ruby
  names = ["李白", "杜甫", "白居易"]

  names.each do | x |
    puts x
  end
#+END_SRC

#+RESULTS:
: 李白
: 杜甫
: 白居易

* 散列 (hash)

** 符号 (Symbol)

Hash 中的索引常用符号或字符串表示

#+BEGIN_SRC ruby
sym = :foo
sym2 = :"foo"
p sym, sym2

p sym.to_s
p "foo".to_sym
#+END_SRC

#+RESULTS:
: :foo
: :foo
: "foo"
: :foo

** 创建和使用 Hash

#+BEGIN_SRC ruby
info = {:名 => "李白", :字 => "太白", :号 => "青莲居士", :代表作 => ["蜀道难"]}
p info

p info[:名], info[:字], info[:号], info[:代表作]

info[:代表作] = ["蜀道难", "忆秦娥"]
p info[:代表作]
#+END_SRC

#+RESULTS:
: {:名=>"李白", :字=>"太白", :号=>"青莲居士", :代表作=>["蜀道难"]}
: "李白"
: "太白"
: "青莲居士"
: ["蜀道难"]
: ["蜀道难", "忆秦娥"]

** 循环 Hash

#+BEGIN_SRC ruby
  info = {:名 => "李白", :字 => "太白", :号 => "青莲居士", :代表作 => ["蜀道难", "忆秦娥"]}

  info.each do | key, value |
    puts "#{key}: #{value}"
  end
#+END_SRC

#+RESULTS:
: 名: 李白
: 字: 太白
: 号: 青莲居士
: 代表作: ["蜀道难", "忆秦娥"]

* 正则表达式 (Regular Expression)

#+BEGIN_SRC ruby
p (/cde/ =~ "abcdefg")
p (/ruby/ =~ "I am learning Ruby.")
p (/ruby/i =~ "I am learning Ruby.")
#+END_SRC

#+RESULTS:
: 2
: nil
: 14

#+BEGIN_SRC ruby
  names = ["小林", "林", "红叶", "岩雀"]
  names.each do |name|
    if /林/ =~ name
      puts name
    end
  end
#+END_SRC

#+RESULTS:
: 小林
: 林
