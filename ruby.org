#+PROPERTY: header-args:ruby :results output

* 控制语句
** 条件（比较）

#+BEGIN_SRC ruby
p (1 == 1)
p (1 == 2)
p ("Ruby" == "Ruby")
p ("Ruby" == "Rubies")
p (1 != 1)
p (1 != 2)
p /a/ =~ "hello"
#+END_SRC

#+RESULTS:
: true
: false
: true
: false
: false
: true
: nil

*** Ruby 的真假值

#+NAME: Ruby 的真假值
| 假 | false, nil                     |
| 真 | 除了 flase 和 nil 外的所有对象 |

*** 逻辑运算（与、或、非）

- &&
- ||
- ~

** if

#+BEGIN_SRC ruby
  x = 20
  if x >= 10
    puts "bigger"
  else
    puts "smaller"
  end
#+END_SRC

#+RESULTS:
: bigger

** unless

#+BEGIN_SRC ruby
puts "Hello, Ruby!" unless nil
#+END_SRC

#+RESULTS:
: Hello, Ruby!

注意 if 和 unless 都可以作为修饰符

#+BEGIN_SRC ruby
puts "Hello" if true
puts "world" unless false
#+END_SRC

#+RESULTS:
: Hello
: world

** case

#+NAME: case.rb
#+BEGIN_SRC ruby
  tags = [ "a", "img", "pre"]
  tags.each do |tagname|
    case tagname
    when "p", "a", "i", "b", "blockquote"
      puts "#{tagname} has child."
    when "img", "br"
      puts "#{tagname} has no child."
    else
      puts "#{tagname} cannot be used."
    end
  end
#+END_SRC

#+RESULTS: case.rb
: a has child.
: img has no child.
: pre cannot be used.

#+NAME: case_class.rb
#+BEGIN_SRC ruby
  array = [ "a", 1, nil ]
  array.each do |item|
    case item
    when String
      puts "Item is a String"
    when Numeric
      puts "Item is a Number"
    else
      puts "Item is something."
    end
  end
#+END_SRC

#+RESULTS: case_class.rb
: Item is a String
: Item is a Number
: Item is something.

#+NAME: case_regexp.rb
#+BEGIN_SRC ruby
  File.read("/var/mail/xcy").each_line do |line|
    case line
    when /^From:/i
      puts "发现寄件人信息"
    when /^To:/i
      puts "发现收件人信息"
    when /^Subject:/i
      puts "发现主题信息"
    when /^$/
      puts "头部解析完毕"
      exit
    else
    end
  end
#+END_SRC

#+RESULTS: case_regexp.rb
: 发现收件人信息
: 发现主题信息
: 发现寄件人信息
: 头部解析完毕

*** case-when 中的比较 ~===~

~===~ 表示范围更广的相等，有三个作用：

1. 跟 == 相同
2. 跟 =~ 相同
3. 判断右边的对象是不是属于左边的类

#+BEGIN_SRC ruby
  p "a" === "a"
  # p "a" === String
  p String === "a"
  p /a/ === "a love letter"
#+END_SRC

#+RESULTS:
: true
: true
: true

** 循环

#+BEGIN_SRC ruby
  i = 1
  while i <= 3
    puts i
    i = i + 1
  end
#+END_SRC

#+RESULTS:
: 1
: 2
: 3

* 数组 (Array)

** 初始化数组、访问和修改数组元素、数组长度
#+BEGIN_SRC ruby
names = ["李白", "杜甫", "白居易"]
p names
print "第一个名字是: ", names[0], "\n"

names[0] = "李商隐"
p names
print "第一个名字是: ", names[0], "\n"

names[10] = "陈子昂"
p names

p names.size
#+END_SRC

#+RESULTS:
: ["李白", "杜甫", "白居易"]
: 第一个名字是: 李白
: ["李商隐", "杜甫", "白居易"]
: 第一个名字是: 李商隐
: ["李商隐", "杜甫", "白居易", nil, nil, nil, nil, nil, nil, nil, "陈子昂"]
: 11

** 循环一个数组

each 是一个带块 (block) 的方法

#+BEGIN_SRC ruby
  names = ["李白", "杜甫", "白居易"]

  names.each do | x |
    puts x
  end
#+END_SRC

#+RESULTS:
: 李白
: 杜甫
: 白居易

* 散列 (hash)

** 符号 (Symbol)

Hash 中的索引常用符号或字符串表示

#+BEGIN_SRC ruby
sym = :foo
sym2 = :"foo"
p sym, sym2

p sym.to_s
p "foo".to_sym
#+END_SRC

#+RESULTS:
: :foo
: :foo
: "foo"
: :foo

** 创建和使用 Hash

#+BEGIN_SRC ruby
info = {:名 => "李白", :字 => "太白", :号 => "青莲居士", :代表作 => ["蜀道难"]}
p info

p info[:名], info[:字], info[:号], info[:代表作]

info[:代表作] = ["蜀道难", "忆秦娥"]
p info[:代表作]
#+END_SRC

#+RESULTS:
: {:名=>"李白", :字=>"太白", :号=>"青莲居士", :代表作=>["蜀道难"]}
: "李白"
: "太白"
: "青莲居士"
: ["蜀道难"]
: ["蜀道难", "忆秦娥"]

** 循环 Hash

#+BEGIN_SRC ruby
  info = {:名 => "李白", :字 => "太白", :号 => "青莲居士", :代表作 => ["蜀道难", "忆秦娥"]}

  info.each do | key, value |
    puts "#{key}: #{value}"
  end
#+END_SRC

#+RESULTS:
: 名: 李白
: 字: 太白
: 号: 青莲居士
: 代表作: ["蜀道难", "忆秦娥"]

* 正则表达式 (Regular Expression)

#+BEGIN_SRC ruby
p (/cde/ =~ "abcdefg")
p (/ruby/ =~ "I am learning Ruby.")
p (/ruby/i =~ "I am learning Ruby.")
#+END_SRC

#+RESULTS:
: 2
: nil
: 14

#+BEGIN_SRC ruby
  names = ["小林", "林", "红叶", "岩雀"]
  names.each do |name|
    if /林/ =~ name
      puts name
    end
  end
#+END_SRC

#+RESULTS:
: 小林
: 林

* 命令行程序

** 参数 ARGV

命令行参数保存在 ARGV 中

#+BEGIN_SRC ruby :tangle print_argv.rb
# -*- coding: utf-8; -*-

puts "首个参数: #{ARGV[0]}"
puts "第二个参数: #{ARGV[1]}"
puts "第三个参数: #{ARGV[2]}"
#+END_SRC

#+BEGIN_SRC sh
ruby print_argv.rb 1st 2nd 3rd
#+END_SRC

#+RESULTS:
| 首个参数:   | 1st |
| 第二个参数: | 2nd |
| 第三个参数: | 3rd |

#+BEGIN_SRC ruby :tangle arg_arith.rb
x = ARGV[0].to_i
y = ARGV[1].to_i

puts "#{x} + #{y} = #{ x + y }"
puts "#{x} - #{y} = #{ x - y }"
puts "#{x} * #{y} = #{ x * y }"
puts "#{x} / #{y} = #{ x / y }"
#+END_SRC

#+BEGIN_SRC sh :results output
ruby arg_arith.rb 5 3
#+END_SRC

#+RESULTS:
: 5 + 3 = 8
: 5 - 3 = 2
: 5 * 3 = 15
: 5 / 3 = 1

** 文件的读取

首先随便创建一个文件：

#+BEGIN_SRC sh :results silent
cal > cal.txt
#+END_SRC

*** 一次性读取

然后使用 Ruby 读取这个文件:

#+BEGIN_SRC ruby
  filename = "cal.txt"
  file = File.open(filename)
  text = file.read
  print text
  file.close
#+END_SRC

#+RESULTS:
:       六月 2017         
: 日 一 二 三 四 五 六  
:              1  2  3  
:  4  5  6  7  8  9 10  
: 11 12 13 14 15 16 17  
: 18 19 20 21 22 _2_3 24  
: 25 26 27 28 29 30     
:                       

或者直接用 File.read 方法

#+BEGIN_SRC ruby
  print File.read("cal.txt")
#+END_SRC

#+RESULTS:
:       六月 2017         
: 日 一 二 三 四 五 六  
:              1  2  3  
:  4  5  6  7  8  9 10  
: 11 12 13 14 15 16 17  
: 18 19 20 21 22 _2_3 24  
: 25 26 27 28 29 30     
:                       

*** 一行一行读取

#+BEGIN_SRC ruby
  filename = "cal.txt"
  file = File.open(filename)
  file.each_line do |line|
    print line
  end
  file.close
#+END_SRC

#+RESULTS:
:       六月 2017         
: 日 一 二 三 四 五 六  
:              1  2  3  
:  4  5  6  7  8  9 10  
: 11 12 13 14 15 16 17  
: 18 19 20 21 22 _2_3 24  
: 25 26 27 28 29 30     
:                       

** simple_grep.rb

#+BEGIN_SRC ruby :tangle simple_grep.rb
  pattern = Regexp.new(ARGV[0])
  filename = ARGV[1]

  file = File.open(filename)
  file.each_line do |line|
    if pattern =~ line
      print line
    end
  end
  file.close
#+END_SRC

#+BEGIN_SRC sh :results output
ruby simple_grep.rb line simple_grep.rb
#+END_SRC

#+RESULTS:
: file.each_line do |line|
:   if pattern =~ line
:     print line

* 方法

#+BEGIN_SRC ruby
  def hello
    puts "Hello, Ruby!"
  end

hello()
#+END_SRC

#+RESULTS:
: Hello, Ruby!

** 方法有三类

1. 实例方法
2. 类方法
3. 函数式方法（不需要接收者的方法，如 print, sleep）

| 方法类型   | 接受者 | 举例                  | 标记                  |
|------------+--------+-----------------------+-----------------------|
| 实例方法   | 实例   | "abc".size            | String#size           |
| 类方法     | 类     | Time.now 或 Time::now | Time.now 或 Time::now |
| 函数式方法 | 无     | print "hi"            |                       |

#+BEGIN_SRC ruby
  # 1. 实例方法
  p "1, 2, 3".split(",")
  p [1, 2, 3].index(3)
  p 100.to_s

  # 2. 类方法

  text = File.read("cal.txt")
  p text.split("\n")[0]
  p Time.now, Time::now
  p Array["a", "b", "c"]

  # 3. 函数式
  print "Hello"
  sleep(3)
#+END_SRC

#+RESULTS:
: ["1", " 2", " 3"]
: 2
: "100"
: "      六月 2017         "
: 2017-06-23 23:03:29 +0800
: 2017-06-23 23:03:29 +0800
: ["a", "b", "c"]
: Hello

** 方法的定义

*** 参数表

一个参数

#+BEGIN_SRC ruby
  def say_hi(name)
    puts "Hi, #{name}!"
  end

  say_hi("Ruby")
#+END_SRC

#+RESULTS:
: Hi, Ruby!

没有或者一个参数（AKA 可选参数）

#+BEGIN_SRC ruby
  def say_hi(name="Ruby")
    puts "Hi, #{name}!"
  end

  say_hi()
  say_hi("Emacs")
#+END_SRC

#+RESULTS:
: Hi, Ruby!
: Hi, Emacs!

零到 N 个参数：

#+BEGIN_SRC ruby
  def sum(*nums)
    sum = 0
    for i in nums
      sum += i
    end
    sum
  end

  p sum(1, 2, 3)
  p sum
#+END_SRC

#+RESULTS:
: 6
: 0

一到 N 个参数：

#+BEGIN_SRC ruby
  def sum (init, *nums)
    sum = init
    for i in nums
      sum += i
    end
    sum
  end

  p sum(100, 1, 2, 3)
#+END_SRC

#+RESULTS:
: 106

二到 N 个参数

#+BEGIN_SRC ruby
  def sum(init, *nums, final)
    sum = init
    for i in nums
      sum += i
    end
    sum + final
  end

  p sum(100, 1, 2, 3, 900)
#+END_SRC

#+RESULTS:
: 1006

**** 关键词参数

#+BEGIN_SRC ruby
  def area(x: 0, y: 0)
    x * y
  end

  p area(x: 3, y: 4)
  p area(y: 4, x: 3)
#+END_SRC

#+RESULTS:
: 12
: 12

使用 ** NAME 可以把多余的关键词参数保存到一个 Hash 中

#+BEGIN_SRC ruby
  def f(x: 0, **args)
    p [x, args]
  end

  f(x: 1)
  f(x: 1, y: 2, z: 3)
#+END_SRC

#+RESULTS:
: [1, {}]
: [1, {:y=>2, :z=>3}]

可以把一个 Hash 值当作参数传进去

#+BEGIN_SRC ruby
  def f(a: 1, b: 2)
    p [a, b]
  end

  f(a: 1, b: 2)
  h = {:a => 1, :b => 2}
  f h
#+END_SRC

#+RESULTS:
: [1, 2]
: [1, 2]

*** 返回值

除非使用 return，否则以最后一句的返回值作为函数的返回值

*** 定义带块的方法

#+BEGIN_SRC ruby
  def myloop
    while true
      yield 
    end
  end

  i = 0
  myloop do
    puts i
    break if (i += 1) > 3
  end
#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 3

** 方法的调用

除了正常地指定方法的参数，也可以直接把 Array 和 Hash 值传入

#+BEGIN_SRC ruby
  def sum(*args)
    sum = 0
    args.each { |i| sum += i }
    sum
  end

  p sum(1, 2, 3)

  array1 = [1, 2, 3, 4]
  p sum(*array1)
#+END_SRC

#+RESULTS:
: 6
: 10

* 加载其它 Ruby 文件

#+BEGIN_SRC ruby :tangle foo.rb
  def foo
    puts "Foo Bar Baz"
  end
#+END_SRC

好吧，可以不用设置 Load Path 了，直接写全路径：

#+BEGIN_SRC ruby
require "./foo"
foo
#+END_SRC

#+RESULTS:
: Foo Bar Baz

另外用 require 可以省略扩展名 ~.rb~

* PP (Pretty-Print 的 p 方法)

注意这个例子不好。

#+BEGIN_SRC ruby
require "pp"

info = {:名 => "李白", :字 => "太白", :号 => "青莲居士", :代表作 => ["蜀道难", "忆秦娥"]}
pp info
#+END_SRC

#+RESULTS:
: {:名=>"李白", :字=>"太白", :号=>"青莲居士", :代表作=>["蜀道难", "忆秦娥"]}

* 变量

** 变量有 4 类

   | 局部变量 | 以字母或下划线开头 |
   | 全局变量 | 以 $ 开头          |
   | 实例变量 | 以 @ 开头          |
   | 类变量   | 以 @@ 开头         |

 #+BEGIN_SRC ruby
     FOO_VERSION = "0.1"             # 常量
     $x = 0                          # 全局
     x = 0                           # 局部变量

     p ARGV
     p RUBY_VERSION
     p __FILE__
     p __LINE__
 #+END_SRC

 #+RESULTS:
 : []
 : "2.3.3"
 : "-"
 : 8

** 多重赋值

#+BEGIN_SRC ruby
  def log() puts "$a = #{$a}, $b = #{$b}"; end

  $a, $b = 1, 2
  log

  $a, $b = $b, $a
  log

  a, b = [1, 2, 3, 4]
  puts "a = #{a}, b = #{b}"

  a, (b, c), d = [1, [2, 3], 4]
  print a, b, c, d, "\n"
  #+END_SRC

#+RESULTS:
: $a = 1, $b = 2
: $a = 2, $b = 1
: a = 1, b = 2
: 1234

* 对象的同一性

每一个对象都有 object_id

| equal? | 相同的 object_id          |
| ==     | 值相同（不区分 1 和 1.0） |
| eql?   | 值相同（区分 1 和 1.0）   |

#+BEGIN_SRC ruby
s1 = "foo"
s2 = s1
s3 = "foo"
p s1.object_id, s2.object_id, s3.object_id
p s1.equal?(s2)
p s1.equal?(s3)
#+END_SRC

#+RESULTS:
: 47442501488500
: 47442501488500
: 47442501488480
: true
: false

#+BEGIN_SRC ruby
p 1 == 1.0
p 1.eql?(1.0)
#+END_SRC

#+RESULTS:
: true
: false

* do ~ end 和 { ~ }

两者通用，一般建议：

- 跨行时用 do ~ end
- 单行时用 { ~ }

* 循环

循环可以分为控制结构和方法

| while     | 控制结构 |
| until     | 控制结构 |
| for       | 控制结构 |
| times     | 方法     |
| each      | 方法     |
| each_line | 方法     |

循环控制

| break | 结束循环           |
| next  | 立即进入下一次循环 |
| redo  | 重新执行本次循环   |

#+BEGIN_SRC ruby
  (1..3).each do |i|
    puts i
    break if i == 2
  end
#+END_SRC

#+RESULTS:
: 1
: 2

** while

#+BEGIN_SRC ruby
  sum = 0
  i = 1
  while i <= 100
    sum += i
    i += 1
  end
  puts sum
#+END_SRC

#+RESULTS:
: 5050

** until

#+BEGIN_SRC ruby
  sum = 0
  i = 1
  until i > 100
    sum += i
    i += 1
  end

  puts sum
#+END_SRC

#+RESULTS:
: 5050

** loop

#+BEGIN_SRC ruby
  i = 0
  loop do
    break if i == 3
    puts "hi"
    i += 1
  end
#+END_SRC

#+RESULTS:
: hi
: hi
: hi

** for

#+BEGIN_SRC ruby
  sum = 0
  for i in 1..100
    sum += i
  end
  puts sum
#+END_SRC

#+RESULTS:
: 5050

#+BEGIN_SRC ruby
  names = [ "Awk", "Ruby", "Python" ]
  for name in names
    puts name
  end
#+END_SRC

#+RESULTS:
: Awk
: Ruby
: Python

** times

#+BEGIN_SRC ruby
  3.times do
    puts "I am learning Ruby."
  end
#+END_SRC

#+RESULTS:
: I am learning Ruby.
: I am learning Ruby.
: I am learning Ruby.

块 do ~ end 还可以写成 { ~ }

#+BEGIN_SRC ruby
  3.times { puts "hi" }
#+END_SRC

#+RESULTS:
: hi
: hi
: hi

times 还可以知道序号

#+BEGIN_SRC ruby
  3.times do |i|
    puts "第 #{i} 次循环"
  end
#+END_SRC

#+RESULTS:
: 第 0 次循环
: 第 1 次循环
: 第 2 次循环

或者

#+BEGIN_SRC ruby
3.times { |i| puts "第 #{i} 次循环" }
#+END_SRC

#+RESULTS:
: 第 0 次循环
: 第 1 次循环
: 第 2 次循环

** each

#+BEGIN_SRC ruby
  sum = 0
  (1..100).each do |i|
    sum += i
  end
  p sum
#+END_SRC

#+RESULTS:
: 5050

#+BEGIN_SRC ruby
  sum = 0
  (1..100).each {|i| sum += i; i += 1}
  p sum
#+END_SRC

#+RESULTS:
: 5050

* 类 (Class)

类和实例的关系： 

#+BEGIN_SRC ruby
  ary = []
  str = "Hello, Ruby!"

  p ary.class
  p str.class

  p ary.instance_of?(Array)
  p ary.instance_of?(String)
  p str.instance_of?(String)
  p str.instance_of?(Array)
#+END_SRC

#+RESULTS:
: Array
: String
: true
: false
: true
: false

is_a? 和 instance_of? 的不同和相同

#+BEGIN_SRC ruby
str = "This is a string."
p str.instance_of?(String)
p str.instance_of?(Object)
p str.is_a?(String)
p str.is_a?(Object)
#+END_SRC

#+RESULTS:
: true
: false
: true
: true

** 类的定义

实例变量和实例方法

#+BEGIN_SRC ruby
  class HelloWorld
    def initialize(myname = "Ruby")
      @name = myname
    end

    def hello
      puts "Hello, Wolrd!  I am #{@name}"
    end

    def bar
      @foo
    end
  end

  bob   = HelloWorld.new("Bob")
  alice = HelloWorld.new("Alice")
  ruby  = HelloWorld.new

  bob.hello
  alice.hello
  ruby.hello
  p ruby.bar
#+END_SRC

#+RESULTS:
: Hello, Wolrd!  I am Bob
: Hello, Wolrd!  I am Alice
: Hello, Wolrd!  I am Ruby
: nil

*** 存储器

可以手动编写：

#+BEGIN_SRC ruby
  class HelloWorld
    def initialize(name = "ruby")
      @name = name
    end

    def hello
      puts "Hello World!  My name is #{@name}"
    end

    def name
      @name
    end

    def name=(value)
      @name = value
    end
  end

  bob = HelloWorld.new("Bob")
  bob.hello
  p bob.name
  bob.name = "Bobby"
  p bob.name
  bob.hello
#+END_SRC

#+RESULTS:
: Hello World!  My name is Bob
: "Bob"
: "Bobby"
: Hello World!  My name is Bobby

或者用

| attr_reader :name   | 读     |
| attr_writer :name   | 写     |
| attr_accessor :name | 读和写 |

#+BEGIN_SRC ruby
  class Cat
    attr_accessor :name
  end

  tom = Cat.new
  tom.name = "Tom"
  p tom.name
#+END_SRC

#+RESULTS:
: "Tom"

*** public, private, protected

默认是 public，private 指对象无法使用 obj.func

#+BEGIN_SRC ruby
  class AccTest
    def pub
      puts "pub"
    end

    public :pub

    def priv
      puts "priv"
    end

    private :priv

    def pub2
      # 错误
      # self.priv
      priv
      pub
      self.pub
      puts "pub2"
    end
  end

  acc = AccTest.new
  acc.pub
  acc.pub2
  # acc.priv
#+END_SRC

#+RESULTS:
: pub
: priv
: pub
: pub
: pub2

protected 和 private 类似，只是可以在类定义内部用 foo.func

#+BEGIN_SRC ruby
  class Point
    attr_accessor :x, :y
    protected :x=, :y=
    def initialize(x = 0, y = 0)
      @x, @y = x, y
    end

    def swap(other)
      tmp_x, tmp_y = @x, @y
      @x, @y = other.x, other.y
      other.x, other.y = tmp_x, tmp_y
    end
  end

  p0 = Point.new
  p1 = Point.new(3, 4)

  p [ p0.x, p0.y ]
  p [ p1.x, p1.y ]

  p0.swap(p1)
  p [ p0.x, p0.y ]
  p [ p1.x, p1.y ]
#+END_SRC

#+RESULTS:
: [0, 0]
: [3, 4]
: [3, 4]
: [0, 0]

** 在原有类的基础上添加方法

#+BEGIN_SRC ruby
  str = "Hello World!"
  p str.methods.size

  class String
    def count_word
      split(/\s+/).size
    end
  end

  p str.methods.size

  p str.count_word
#+END_SRC

#+RESULTS:
: 170
: 171
: 2

** 继承

#+BEGIN_SRC ruby
  class RingArray < Array
    def [](i)
      idx = i % size
      super idx
    end
  end

  ary = RingArray[1, 2, 3]
  for i in 0..5
    p ary[i]
  end
#+END_SRC

#+RESULTS:
: 1
: 2
: 3
: 1
: 2
: 3

** 单例类

#+BEGIN_SRC ruby
  str = "Hello, World!"

  class << str
    def count_word
      split(/\s+/).size
    end
  end

  p str.count_word

  p [str.methods.size, "".methods.size]
#+END_SRC

#+RESULTS:
: 2
: [171, 170]

** 类方法

#+BEGIN_SRC ruby
  class << String
    def hello
      p "这是一个类方法"
    end
  end

  String.hello
#+END_SRC

#+RESULTS:
: "这是一个类方法"

#+BEGIN_SRC ruby
  module ClassMethods
    def hello
      p "这是一个类方法"
    end
  end

  module InstanceMethods
    def world
      p "这是一个实例方法"
    end
  end

  class MyClass
    extend ClassMethods
    include InstanceMethods
  end

  MyClass.hello
  MyClass.new.world
#+END_SRC

#+RESULTS:
: "这是一个类方法"
: "这是一个实例方法"

* 模块 (Module)

模块与类的不同在于：

- 模块没有实例
- 模块不能继承

** 模块的用处

*** 提供命名空间 (Namespace)

  #+BEGIN_SRC ruby
  p FileTest.exist?(".")
  p FileTest.size(".")
  #+END_SRC

  #+RESULTS:
  : true
  : 272

  #+BEGIN_SRC ruby
  p Math::PI

  include Math
  p PI
  #+END_SRC

  #+RESULTS:
  : 3.141592653589793
  : 3.141592653589793

*** 扩展 Class (Mix-in)

定义类时可以 include 一个模块，直接把模块的常量和方法引入。

** 创建模块

注意公开的方法需用 ~module_function~ 指定。

#+BEGIN_SRC ruby
  module HelloModule
    Version = "1.0"

    def hello(name)
      puts "Hello, #{name}!"
    end

    module_function :hello
  end

  p HelloModule::Version
  HelloModule.hello("Alice")

  include HelloModule
  p Version
  hello("Tom")
#+END_SRC

#+RESULTS:
: "1.0"
: Hello, Alice!
: "1.0"
: Hello, Tom!

* 异常处理

#+BEGIN_EXAMPLE
  begin
    有可能出现异常
  rescue => 异常变凉
    异常处理 
  ensure
    无论如何都会执行
  end
#+END_EXAMPLE

** rescue

 #+BEGIN_SRC ruby
   begin
     File.open "/no/fil"
   rescue => ex
     p $!
     p ex
     p [ ex.class, ex.message, ex.backtrace ]
   end
 #+END_SRC

 #+RESULTS:
 : #<Errno::ENOENT: No such file or directory @ rb_sysopen - /no/fil>
 : #<Errno::ENOENT: No such file or directory @ rb_sysopen - /no/fil>
 : [Errno::ENOENT, "No such file or directory @ rb_sysopen - /no/fil", ["-:2:in `initialize'", "-:2:in `open'", "-:2:in `<main>'"]]

 #+NAME: wc.rb
 #+BEGIN_SRC ruby :tangle wc.rb :tangle-mode '#o755 :shebang "#!/usr/bin/env ruby"
   ltotal, wtotal, ctotal = 0, 0, 0

   ARGV.each do |filename|
     begin
       l, w, c = 0, 0, 0
       file = File.open(filename)
       file.each_line do |line|
         l += 1
         ltotal += 1
         w += line.split(/\s+/).size
         wtotal += line.split(/\s+/).size
         c += line.size
         ctotal += line.size
       end
       file.close
       puts "#{l}\t#{w}\t#{c}\t#{filename}"
     rescue => ex
       puts ex.message
     end
   end

   puts "#{ltotal}\t#{wtotal}\t#{ctotal}"
 #+END_SRC

 #+BEGIN_SRC sh :results output
   ./wc.rb /etc/passwd /no/file /etc/hosts
   # wc /etc/passwd /etc/hosts
 #+END_SRC

 #+RESULTS:
 : 86	243	5253	/etc/passwd
 : No such file or directory @ rb_sysopen - /no/file
 : 15	50	362	/etc/hosts
 : 101	293	5615


如果出现异常，rescue 的返回值时 rescue 后面的结果。rescue 作为修饰符

#+BEGIN_SRC ruby :results value
  # begin
  #   foo
  # rescue
  #   123
  # end

  foo rescue 1234
#+END_SRC

#+RESULTS:
: 1234

** ensure

#+BEGIN_SRC ruby
  def copy(from, to)
    src = File.open(from)
    begin
      dst = File.open(to, "w")
      data = src.read
      dst.write(data)
      dat.close
    ensure
      src.close
    end
  end
#+END_SRC


** 明确指定处理的异常

rescue 不指定异常种类时会捕捉所有的 StandardError 及其子类。

#+BEGIN_SRC ruby
  div = 0
  begin
    p 1 / div
    File.open "/no/file"
  rescue ZeroDivisionError => ex
    puts ex.message
    div += 1
    retry
  rescue Errno::ENOENT => ex
    puts ex.message
  end
#+END_SRC

#+RESULTS:
: divided by 0
: 1
: No such file or directory @ rb_sysopen - /no/file

** 抛出异常

#+BEGIN_SRC ruby
  class MyError < StandardError
  end

  def f1
    raise "Some error in f1"
  end

  def f2
    raise MyError
  end

  f1 rescue p $!

  begin
    f2
  rescue MyError
    p [$1]
  end
#+END_SRC

#+RESULTS:
: #<RuntimeError: Some error in f1>
: [nil]

* 块 (Block)

** 定义带块的方法

#+BEGIN_SRC ruby
  def total(from, to)
    result = 0
    from.upto(to) do |num|
      if block_given?
        result += yield(num)
      else
        result += num
      end
    end
    return result
  end

  p total(1, 100)
  p total(1, 100) {|n| n * 2}
#+END_SRC

#+RESULTS:
: 5050
: 10100

** 把块封装成对象 (Proc)

#+BEGIN_SRC ruby
  hello = Proc.new do |name|
    puts "Hell, #{name}!"
  end

  hello.call("World")
  hello.call("Ruby")
#+END_SRC

#+RESULTS:
: Hell, World!
: Hell, Ruby!

Block 还可以当作参数写入参数表，但它必须在参数表的最后。

#+BEGIN_SRC ruby
  def total(from, to, &block)
    total = 0
    from.upto(to) do |num|
      if block
        total += block.call(num)
      else
        total += num
      end
    end
    return total
  end

  p total(1, 100)
  p total(1, 100) { |n| n * 2 }
#+END_SRC

#+RESULTS:
: 5050
: 10100

Block 还以传递

#+BEGIN_SRC ruby
  def call_each(ary, &block)
    ary.each(&block)
  end

  call_each([1, 2, 3]) do |n|
    puts "The number is #{n}"
  end
#+END_SRC

#+RESULTS:
: The number is 1
: The number is 2
: The number is 3

定义块的临时变量

#+BEGIN_SRC ruby
  x, y = 0, 0
  ary = [1, 2, 3]
  ary.each do |x ;y|
    y = x
    p [x, y]
  end

  p [x, y]
#+END_SRC

#+RESULTS:
: [1, 1]
: [2, 2]
: [3, 3]
: [0, 0]

** 用途
*** 各种循环
  - Array#each
  - Array#each_with_index
  - Hash#each
  - File#each_line
  - File#each_byte

  #+BEGIN_SRC ruby
    ary = [ 1, 2, 3 ]
    ary.each_with_index do |item, idx|
      puts "ary[#{idx}] = #{item}"
    end

    ary.each_with_index { |item, idx|
      puts "ary[#{idx}] = #{item}"
    }
  #+END_SRC

  #+RESULTS:
  : ary[0] = 1
  : ary[1] = 2
  : ary[2] = 3
  : ary[0] = 1
  : ary[1] = 2
  : ary[2] = 3

  #+BEGIN_SRC ruby
    hash = { 1 => "a", 2 => "b", 3 => "c" }
    hash.each { |pair|
      p pair[1]
    }

    hash.each { |k, v|
      p v
    }
  #+END_SRC

  #+RESULTS:
  : "a"
  : "b"
  : "c"
  : "a"
  : "b"
  : "c"

  #+BEGIN_SRC ruby
    file = File.open ("/etc/passwd")
    file.each_line do |line|
      puts "-" * line.size if line.start_with?("#")
    end
    file.close
  #+END_SRC

  #+RESULTS:
  #+begin_example
  ---
  ----------------
  ---
  ----------------------------------------------------------------------------
  -----------------------------------------------------------------------
  ------------------
  --
  ----------------------------------------------------------------------
  ------------------
  ---
 #+end_example

*** 隐藏常规处理

#+BEGIN_SRC ruby
  File.open ("/etc/passwd") do |file|
    file.each_line do |line|
      puts "-" * line.size if line.start_with?("#")
    end
  end
#+END_SRC

#+RESULTS:
#+begin_example
---
----------------
---
----------------------------------------------------------------------------
-----------------------------------------------------------------------
------------------
--
----------------------------------------------------------------------
------------------
---
#+end_example

等价于

#+BEGIN_SRC ruby
  file = File.open("/etc/passwd")
  begin
    file.each_line do |line|
      puts "-" * line.size if line.start_with?("#")
    end
  ensure
    file.close
  end
#+END_SRC

#+RESULTS:
#+begin_example
---
----------------
---
----------------------------------------------------------------------------
-----------------------------------------------------------------------
------------------
--
----------------------------------------------------------------------
------------------
---
#+end_example

*** 替换部分算法

#+BEGIN_SRC ruby
  langs = [ "Ruby", "Awk", "Perl", "C", "Emacs Lisp" ]
  p langs.sort { |a, b| a.length <=> b.length }
#+END_SRC

#+RESULTS:
: ["C", "Awk", "Ruby", "Perl", "Emacs Lisp"]
